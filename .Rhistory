usethis::create_github_token()
usethis::create_github_token()
install.packages("usethis")
usethis::create_github_token()
gitcreds::gitcreds_set()
git config --global user.email "202112437@alu.comillas.edu"
git config --global user.name "carlosgmv197"
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(haven)
library(nycflights13)
library(gridExtra)
chlstrl=read.csv("./data/cholesterol.csv")
str(chlstrl)
#Esto nos permite saber cuántos valores son NA y cuántos no lo son de la tabla completa
table(is.na(chlstrl))
#Esto nos permite saber la localización de cada valor na en la tabla (con head solo salen las 6 primeras filas)
head(is.na(chlstrl))
summary(chlstrl)
#Recorrido intercuartílico
IQR(chlstrl$chol,na.rm=TRUE)
#Los valores atípicos
unname(quantile(chlstrl$chol,probs=c(1/4, 3/4), na.rm=TRUE) + c(-1,1) * 1.5 * IQR(chlstrl$chol,na.rm=TRUE))
#La desviación estándar
sd(chlstrl$chol, na.rm=TRUE)
#La varianza
var(chlstrl$chol, na.rm=TRUE)
summary(chlstrl$chol)
#En este chunk se realiza el histograma de la variable colesterol, interpretada como continua
cortes=seq(min(chlstrl$chol, na.rm=T),max(chlstrl$chol, na.rm=T), length.out=26)
ggplot(chlstrl, aes(chol)) +
geom_histogram(aes(y=stat(density)),breaks=cortes, fill="orange", color="black") +
geom_density(color="red",size=1.5)
#Aqui se realiza el diagrama boxplot/violín/dispersión de una variable discreta
ggplot(chlstrl)+
geom_violin(mapping = aes(x=0, y=chol))+
geom_boxplot(mapping = aes(y=chol),fill="orange") +
geom_jitter(aes(x=0, y=chol),
position=position_jitter(w=0.05, h=0), col="blue")
summary(chlstrl$gender)
#table(chlstrl$gender)
#prop.table(table(chlstrl$gender))
#Tabulación de géneros según su frecuencia
chlstrl %>%
count(gender)
#Tabulación de géneros según su frecuencia relativa
chlstrl %>%
count(gender) %>%
mutate(gender, relFreq = prop.table(n), n=NULL)
ggplot(chlstrl) +
geom_bar(aes(gender, fill=gender))
#Sustitución de las columnas de peso y altura por sus equivalentes en el sistema métrico
chlstrl=chlstrl %>%
mutate(height=height*0.0254, weight=weight*0.454)
(chlstrl)
#Creación de la columna BMI a partir de peso y altura
chlstrl=chlstrl %>%
mutate(BMI=weight/(height^2))
(chlstrl)
#Clasificación de todas las filas como parte de un grupo de edad determinado en forma de nueva columna
(chlstrl=chlstrl %>%
mutate(ageGroup=cut(age,breaks=c(10,40,70,100))))
#Frecuencia de cada grupo de edad
(chlstrl %>%
count(ageGroup))
#Cálculo de la media del colesterol y BMI por grupos de edad
(chlstrl %>%
filter(gender=='female') %>%
group_by(ageGroup) %>%
summarise(MedChol=mean(chol, na.rm = TRUE), MedBMI=mean(BMI, na.rm=TRUE)))
set.seed(2019)
x = sample(c(-1, 1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)
cat(paste0(x, sep=", "))
cambiossigno=function(x=sample(c(-1,1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)){
sol=list()
a=length(x)
cs=0
for(y in 1:(a-1)){
if ((x[y]>0)==TRUE && (x[y+1]<0)==TRUE){
cs=cs+1
}else if ((x[y]<0)==TRUE && (x[y+1]>0)==TRUE){
cs=cs+1
}
}
sol$vector=x
sol$cambSigno=cs
returnValue(sol)
}
cambiossigno(x)
cambiossigno()
cat("[1] 3 4 7 8")
cambiossignopos=function(x=sample(c(-1,1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)){
sol=list()
a=length(x)
pos=c()
for(y in 1:(a-1)){
if ((x[y]>0)==TRUE && (x[y+1]<0)==TRUE){
pos=append(pos,y+1)
}else if ((x[y]<0)==TRUE && (x[y+1]>0)==TRUE){
pos=append(pos,y+1)
}
}
sol$vector=x
sol$posiciones=pos
returnValue(sol)
}
cambiossignopos(x)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
g1=ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy), se=FALSE)
g2=ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy,group=drv), se=FALSE)
g3=ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy, color=drv)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, color=drv), se=FALSE)
g4=ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy, color=drv)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy), se=FALSE)
g5=ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy, color=drv)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, linetype=drv), se=FALSE)
g6=ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size = 2.5, stroke = 1.5)
grid.arrange(g1,g2,g3,g4,g5,g6,nrow = 3)
flights %>%
filter(arr_delay>=120)
flights %>%
filter(dest=='IAH'| dest=='HOU')
flights %>%
filter(dest %in% c('IAH','HOU'))
flights %>%
filter(carrier=='UA'| carrier=='AA' | carrier=='DL')
flights %>%
filter(carrier %in% c('UA','AA','DL'))
flights %>%
filter(month==7 | month==8 | month==9 )
flights %>%
filter(month %in% c(7:9))
flights %>%
filter(arr_delay >120, dep_delay<=0)
flights %>%
filter(dep_delay >=60,arr_delay<(dep_delay-30))
flights %>%
filter(dep_time==2400 | dep_time<=600)
setwd("C:/MASTERBD/FundamentosMatematicos/GITHUB/garciamaurinno_carlos/A0")
